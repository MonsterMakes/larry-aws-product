AWSTemplateFormatVersion: 2010-09-09

Description:
  The vpc which consists of a 1 AZ VPC with 1 public subnets.

Parameters:
  EnvironmentName:
    Description: Environment Name
    Type: String
    AllowedPattern: ^[0-9a-z-]*$
  VpcCIDR:
    Description: VPC CIDR
    Type: String
    Default: 10.10.0.0/16
  NumberOfSubnets:
    Description: Number of Subnets to create
    Type: String
    Default: 6
  SubnetOffset:
    Description: Offset of the subnet from the VPC CIDR
    Type: String
    Default: 8

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join [ '-', [!Ref EnvironmentName, 'vpc' ]]
        - Key: Environment
          Value: !Ref EnvironmentName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join [ '-', [!Ref EnvironmentName, 'ig-1' ]]
        - Key: Environment
          Value: !Ref EnvironmentName

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Select [0, !Cidr [!Ref VpcCIDR, !Ref NumberOfSubnets, !Ref SubnetOffset]]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Join [ '-', [!Ref EnvironmentName, 'public-1' ]]
        - Key: Environment
          Value: !Ref EnvironmentName

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Join [ '-', [!Ref EnvironmentName, 'pub-rt-tbl-1' ]]
        - Key: Environment
          Value: !Ref EnvironmentName

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  DefaultSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join [ '-', [!Ref EnvironmentName, 'dflt-sec-grp' ]]
      GroupDescription: "Default security group allows traffic within the VPC."
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: '-1'
          FromPort: '-1'
          ToPort: '-1'
          CidrIp: !Ref VpcCIDR
      Tags:
        - Key: Name
          Value: !Join [ '-', [!Ref EnvironmentName, 'dflt-sec-grp' ]]
        - Key: Environment
          Value: !Ref EnvironmentName

Outputs:
  Vpc:
    Description: VPC
    Value: !Ref VPC
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'Vpc' ] ]
  VpcCIDR:
    Description: VPC CIDR
    Value: !Ref VpcCIDR
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'VpcCIDR' ] ]
  PublicSubnet:
    Description: Public Subnet AZ
    Value: !Ref PublicSubnet1
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicSubnet1' ] ]
  PublicSubnet1CidrBlock:
    Description: Public Subnet AZ1 Cidr Block
    Value: !Select [0, !Cidr [!Ref VpcCIDR, !Ref NumberOfSubnets, !Ref SubnetOffset]]
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'PublicSubnet1CidrBlock' ] ]
    Description: Allow VPC Traffic only
    Value: !Ref DefaultSecurityGroup
    Export:
      Name: !Join [ ':', [ !Ref 'EnvironmentName', 'DefaultSecurityGroup' ] ]
